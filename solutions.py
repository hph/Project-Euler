#/usr/bin/env python
#coding=utf8

from operator import mul
from math import factorial
from subprocess import check_output
from sys import argv
from time import time
from tools import *


def problem_1():
    '''Find the sum of all the multiples of 3 or 5 below 1000.'''
    return sum(x for x in xrange(1000) if not x % 3 or not x % 5)


def problem_2():
    '''By considering the terms in the Fibonacci sequence whose values do not
    exceed four million, find the sum of the even-valued terms.'''
    return sum(x for x in fibonacci(4000000) if not x % 2)


def problem_3():
    '''What is the largest prime factor of the number 600851475143?'''
    return check_output('factor 600851475143', shell=True).split()[-1]


def problem_4():
    '''Find the largest palindrome made from the product of two 3-digit
    numbers.'''
    return max(filter(is_palindrome, (x * y for x in xrange(999, 99, -1)
                                            for y in xrange(x, 99, -1))))


def problem_5():
    '''What is the smallest positive number that is evenly divisible by all of
    the numbers from 1 to 20?'''
    return reduce(lcm, range(2, 21))


def problem_6():
    '''Find the difference between the sum of the squares of the first one
    hundred natural numbers and the square of the sum.'''
    return abs(sum(pow(x, 2) for x in xrange(101))
               - pow(sum(x for x in xrange(101)), 2))


def problem_7():
    '''What is the 10001st prime number?'''
    return [p for p in primes(10001)][-1]


def problem_8():
    '''Find the greatest product of five consecutive digits in the 1000-digit
    number.'''
    n = '731671765313306249192251196744265747423553491949349698352031277450632\
         623957831801698480186947885184385861560789112949495459501737958331952\
         853208805511125406987471585238630507156932909632952274430435576689664\
         895044524452316173185640309871112172238311362229893423380308135336276\
         614282806444486645238749303589072962904915604407723907138105158593079\
         608667017242712188399879790879227492190169972088809377665727333001053\
         367881220235421809751254540594752243525849077116705560136048395864467\
         063244157221553975369781797784617406495514929086256932197846862248283\
         972241375657056057490261407972968652414535100474821663704844031998900\
         088952434506585412275886668811642717147992444292823086346567481391912\
         316282458617866458359124566529476545682848912883142607690042242190226\
         710556263211111093705442175069416589604080719840385096245544436298123\
         098787992724428490918884580156166097919133875499200524063689912560717\
         606058861164671094050775410022569831552000559357297257163626956188267\
         0428252483600823257530420752963450'.replace(' ', '')
    return max(reduce(mul, [int(x) for x in n[i:i + 5]])
                                   for i in xrange(len(n) - 4))


def problem_10():
    '''Find the sum of all the primes below two million.'''
    return sum(primes_under(2000000))


def problem_15():
    '''How many routes are there through a 20*20 grid?'''
    return binomial_coefficient(40, 20)


def problem_16():
    '''What is the sum of the digits of the number 2^1000?'''
    return sum(int(x) for x in str(pow(2, 1000)))


def problem_20():
    '''Find the sum of the digits in the number 100!'''
    return sum(int(x) for x in str(factorial(100)))


def problem_29():
    '''How many distinct terms are in the sequence generated by a^b for 2 <= a
    <= 100 and 2 <= b <= 100?'''
    return len(set(pow(a, b) for a in xrange(2, 101) for b in xrange(2, 101)))


def problem_48():
    '''Find the last ten digits of the series, 1^1 + 2^2 + 3^3 + ... +
    1000^1000.'''
    return str(sum(pow(n, n) for n in xrange(1, 1001)))[-10:]


def main():
    solved = range(1, 9) + [10, 15, 16, 20, 29, 48]
    if len(argv) > 0:
        args = argv[1:]
    for problem in solved:
        print 'Problem #%s' % problem
        t = time()
        solution = globals()['problem_%s' % problem]()
        timing = float(time() - t)
        if '-s' in args:
            print 'Solution: %s' % solution
        print 'Time: %.6f s\n' % timing


if __name__ == '__main__':
    main()

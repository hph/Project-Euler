#/usr/bin/env python
#coding=utf8

from operator import mul
from math import factorial
from subprocess import check_output
from time import time
from tools import *

# TODO Create a config.py for imports and global variables?


def problem_1():
    '''Find the sum of all the multiples of 3 or 5 below 1000.'''
    return sum(x for x in xrange(1000) if not x % 3 or not x % 5)


def problem_2():
    '''By considering the terms in the Fibonacci sequence whose values do not
    exceed four million, find the sum of the even-valued terms.'''
    return sum(x for x in fibonacci(4000000) if not x % 2)


def problem_3():
    '''What is the largest prime factor of the number 600851475143?'''
    return check_output('factor 600851475143', shell=True).split()[-1]


def problem_4():
    '''Find the largest palindrome made from the product of two 3-digit
    numbers.'''
    return max(filter(is_palindrome, (x * y for x in xrange(999, 99, -1)
                                            for y in xrange(x, 99, -1))))


def problem_5():
    '''What is the smallest positive number that is evenly divisible by all of
    the numbers from 1 to 20?'''
    return reduce(lcm, range(2, 21))


def problem_6():
    '''Find the difference between the sum of the squares of the first one
    hundred natural numbers and the square of the sum.'''
    return abs(sum(pow(x, 2) for x in xrange(101))
               - pow(sum(x for x in xrange(101)), 2))


def problem_7():
    '''What is the 10001st prime number?'''
    return [p for p in primes(10001)][-1]


def problem_8():
    '''Find the greatest product of five consecutive digits in the 1000-digit
    number.'''
    n = '7316717653133062491922511967442657474235534919493496983520312774506' \
        '3262395783180169848018694788518438586156078911294949545950173795833' \
        '1952853208805511125406987471585238630507156932909632952274430435576' \
        '6896648950445244523161731856403098711121722383113622298934233803081' \
        '3533627661428280644448664523874930358907296290491560440772390713810' \
        '5158593079608667017242712188399879790879227492190169972088809377665' \
        '7273330010533678812202354218097512545405947522435258490771167055601' \
        '3604839586446706324415722155397536978179778461740649551492908625693' \
        '2197846862248283972241375657056057490261407972968652414535100474821' \
        '6637048440319989000889524345065854122758866688116427171479924442928' \
        '2308634656748139191231628245861786645835912456652947654568284891288' \
        '3142607690042242190226710556263211111093705442175069416589604080719' \
        '8403850962455444362981230987879927244284909188845801561660979191338' \
        '7549920052406368991256071760605886116467109405077541002256983155200' \
        '05593572972571636269561882670428252483600823257530420752963450'
    return max(reduce(mul, [int(x) for x in n[i:i + 5]])
                                   for i in xrange(len(n) - 4))


def problem_9():
    '''There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    Find the product abc.'''
    for x in xrange(1000):
        for y in xrange(x):
            z = 1000 - x - y
            if pow(x, 2) + pow(y, 2) == pow(z, 2):
                return reduce(mul, [x, y, z])


def problem_10():
    '''Find the sum of all the primes below two million.'''
    # Five times faster with PyPy.
    return sum(primes_under(2000000))


def problem_15():
    '''How many routes are there through a 20*20 grid?'''
    return binomial_coefficient(40, 20)


def problem_16():
    '''What is the sum of the digits of the number 2^1000?'''
    return sum(int(x) for x in str(pow(2, 1000)))


def problem_20():
    '''Find the sum of the digits in the number 100!'''
    return sum(int(x) for x in str(factorial(100)))


def problem_29():
    '''How many distinct terms are in the sequence generated by a^b for 2 <= a
    <= 100 and 2 <= b <= 100?'''
    return len(set(pow(a, b) for a in xrange(2, 101) for b in xrange(2, 101)))


def problem_48():
    '''Find the last ten digits of the series, 1^1 + 2^2 + 3^3 + ... +
    1000^1000.'''
    return str(sum(pow(n, n) for n in xrange(1, 1001)))[-10:]


def main():
    solved = range(1, 11) + [15, 16, 20, 29, 48]
    results = []
    for problem in solved:
        t = time()
        solution = globals()['problem_%s' % problem]()
        timing = float(time() - t)
        results.append((problem, timing, solution))
    print ' #   | Time (s) | Solution\n------------------------------'
    for problem, solution, timing in results:
        print ' %03d | %.6f | %s' % (problem, solution, timing)



if __name__ == '__main__':
    main()
